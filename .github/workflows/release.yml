name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (leave empty to use package.json version)"
        required: false
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write # for npm provenance

env:
  PACKAGE_NAME: geoman-io-geojson-path-finder
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NODE_VERSION: "22"

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(node -p "require('./package.json').version")
            fi
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

      - name: Check if version exists in package.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [[ "${{ steps.version.outputs.version }}" != "$PACKAGE_VERSION" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Tag version (${{ steps.version.outputs.version }}) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi

      - name: Check for pre-release
        id: check-prerelease
        run: |
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]] || [[ "${{ steps.version.outputs.version }}" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag already exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Update version in package.json
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
          retention-days: 7

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    environment: release

    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ needs.validate.outputs.version }}
          tag_name: v${{ needs.validate.outputs.version }}
          token: ${{ secrets.GEOMAN_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}
          generate_release_notes: true
          files: |
            LICENSE.md
            README.md

  # Publish to NPM
  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    environment: release
    if: needs.validate.outputs.is-prerelease == 'false' || github.event.inputs.prerelease == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./dist

      - name: Publish to NPM
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ "${{ needs.validate.outputs.is-prerelease }}" == "true" ]]; then
            npm publish --tag beta --provenance --access public
          else
            npm publish --provenance --access public
          fi
